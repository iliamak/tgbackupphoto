import streamlit as st
from telethon import TelegramClient
from telethon.tl.types import InputMessagesFilterPhotos
import os
import asyncio
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'phone' not in st.session_state:
    st.session_state.phone = ''
if 'code' not in st.session_state:
    st.session_state.code = ''
if 'auth_step' not in st.session_state:
    st.session_state.auth_step = 'phone'  # –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'phone', 'code', 'completed'

async def download_photos(api_id, api_hash, chat_username):
    logger.info(f"[{datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    try:
        client = TelegramClient('anon', api_id, api_hash)
        logger.info(f"[{datetime.now()}] –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        st.write("–°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç Telegram...")

        await client.connect()
        logger.info(f"[{datetime.now()}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        st.write("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ...")

        if not await client.is_user_authorized():
            if st.session_state.auth_step == 'phone':
                phone_col, button_col = st.columns([3, 1])
                phone = phone_col.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)",
                    key="phone_input",
                    value=st.session_state.phone
                )
                if button_col.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"):
                    st.session_state.phone = phone
                    try:
                        await client.send_code_request(phone)
                        st.session_state.auth_step = 'code'
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
                return

            elif st.session_state.auth_step == 'code':
                code_col, button_col = st.columns([3, 1])
                code = code_col.text_input(
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä {st.session_state.phone}",
                    key="code_input"
                )
                if button_col.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
                    try:
                        await client.sign_in(st.session_state.phone, code)
                        st.session_state.auth_step = 'completed'
                        st.success("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {str(e)}")
                return

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏ - –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.write("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...
        try:
            chat = await client.get_entity(chat_username)
            messages = await client.get_messages(
                chat,
                filter=InputMessagesFilterPhotos,
                limit=None
            )
            
            if not messages:
                st.warning("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
                return
                
            st.success(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(messages)}")
            
            chat_name = chat.title if hasattr(chat, 'title') else chat.username
            os.makedirs(f'photos_from_{chat_name}', exist_ok=True)
            
            progress_bar = st.progress(0)
            for i, message in enumerate(messages):
                progress = (i + 1) / len(messages)
                progress_bar.progress(progress)
                
                path = await message.download_media(f'./photos_from_{chat_name}/')
                if path:
                    st.write(f"–°–∫–∞—á–∞–Ω–æ: {os.path.basename(path)}")
            
            st.success("–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∫–∞—á–∞–Ω—ã!")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —á–∞—Ç–æ–º: {str(e)}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {str(e)}")
        
    finally:
        await client.disconnect()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üì∏ Telegram Photos Downloader")
st.write("–°–∫–∞—á–∏–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —á–∞—Ç–æ–≤ Telegram")

with st.expander("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
    st.write("""
    1. –í–≤–µ–¥–∏—Ç–µ API ID –∏ API Hash (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ my.telegram.org)
    2. –í–≤–µ–¥–∏—Ç–µ username —á–∞—Ç–∞ (–¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'me')
    3. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
    4. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
        - –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤ Telegram
    """)

api_id = st.text_input("API ID", type="password")
api_hash = st.text_input("API Hash", type="password")
chat_username = st.text_input("Username —á–∞—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

if st.button("–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"):
    if not api_id or not api_hash or not chat_username:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    else:
        asyncio.run(download_photos(api_id, api_hash, chat_username))

st.markdown("---")
st.markdown(
    "<div style='text-align: center'>–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ Telegram</div>",
    unsafe_allow_html=True
)
