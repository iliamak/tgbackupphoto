import streamlit as st
from telethon import TelegramClient
from telethon.tl.types import InputMessagesFilterPhotos
import os
import asyncio
import logging
from datetime import datetime
import re
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
   page_title="Telegram Photos Downloader",
   page_icon="üì∏",
   layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'phone' not in st.session_state:
   st.session_state.phone = ''
if 'auth_step' not in st.session_state:
   st.session_state.auth_step = 'phone'
if 'client' not in st.session_state:
   st.session_state.client = None
if 'phone_code_hash' not in st.session_state:
   st.session_state.phone_code_hash = None
if 'session_id' not in st.session_state:
   st.session_state.session_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏

def sanitize_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    return re.sub(r'[\\/*?:"<>|]', "_", filename)

async def send_code(api_id, api_hash, phone):
   """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
   client = None
   try:
       # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
       logger.info(f"[{datetime.now()}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞")
       status_msg = st.empty()
       status_msg.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ API ID –∏ Hash
       if not api_id.isdigit():
           st.error("API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
           logger.error(f"[{datetime.now()}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID: {api_id}")
           return False
       
       if len(api_hash) < 10:
           st.error("API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
           logger.error(f"[{datetime.now()}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API Hash (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)")
           return False

       # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Å–µ—Å—Å–∏–∏
       try:
           client = TelegramClient(f'session_{st.session_state.session_id}', int(api_id), api_hash)
           logger.info(f"[{datetime.now()}] –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
           status_msg.info("–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
       except Exception as e:
           logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
           return False

       # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
       try:
           await asyncio.wait_for(client.connect(), timeout=30)
           logger.info(f"[{datetime.now()}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
           status_msg.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
       except asyncio.TimeoutError:
           logger.error(f"[{datetime.now()}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram")
           st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
           if client and client.is_connected():
               await client.disconnect()
           return False
       except Exception as e:
           logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {str(e)}")
           if client and client.is_connected():
               await client.disconnect()
           return False

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
       try:
           if not await client.is_user_authorized():
               logger.info(f"[{datetime.now()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥")
               status_msg.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
               
               # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
               try:
                   # –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                   progress_bar = st.progress(0)
                   for i in range(10):
                       progress_bar.progress((i + 1) * 10)
                       if i == 3:
                           status_msg.info("–°–≤—è–∑—ã–≤–∞–µ–º—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram...")
                       elif i == 6:
                           status_msg.info("–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                       elif i == 9:
                           status_msg.info("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram...")
                       await asyncio.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                   
                   # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
                   sent = await asyncio.wait_for(
                       client.send_code_request(phone=phone),
                       timeout=30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                   )
                   
                   if sent:
                       logger.info(f"[{datetime.now()}] –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Phone code hash: {sent.phone_code_hash}")
                       st.success("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.")
                       st.session_state.client = client
                       st.session_state.phone_code_hash = sent.phone_code_hash
                       return True
                   else:
                       logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                       st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API.")
                       await client.disconnect()
                       return False
               except asyncio.TimeoutError:
                   logger.error(f"[{datetime.now()}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞")
                   st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä—ã Telegram –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã.")
                   await client.disconnect()
                   return False
               except Exception as e:
                   logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
                   error_message = str(e)
                   if "Too many requests" in error_message:
                       st.error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Telegram. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                   elif "The phone number is invalid" in error_message:
                       st.error("–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                   elif "API ID invalid" in error_message or "APP_ID_INVALID" in error_message:
                       st.error("–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ my.telegram.org")
                   elif "API Hash invalid" in error_message or "API_HASH_INVALID" in error_message:
                       st.error("–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API Hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ my.telegram.org")
                   else:
                       st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {error_message}")
                   await client.disconnect()
                   return False
           else:
               logger.info(f"[{datetime.now()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
               st.success("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
               st.session_state.client = client
               st.session_state.auth_step = 'completed'
               return True
       except Exception as e:
           logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
           if client and client.is_connected():
               await client.disconnect()
           return False
               
   except Exception as e:
       logger.error(f"[{datetime.now()}] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
       st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
       if client and client.is_connected():
           await client.disconnect()
       return False

async def download_photos(api_id, api_hash, chat_username):
   """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
   client = None
   try:
       # –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
       if st.session_state.auth_step == 'phone':
           st.info("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram")
           
           # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
           with st.form(key='phone_form'):
               phone = st.text_input(
                   "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)",
                   value=st.session_state.phone
               )
               submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")
               
               if submit_button:
                   logger.info(f"[{datetime.now()}] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä {phone}")
                   
                   # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
                   if not phone.startswith('+'):
                       phone = '+' + phone
                   
                   phone = phone.replace(' ', '').replace('-', '')
                   logger.info(f"[{datetime.now()}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {phone}")
                   
                   if await send_code(api_id, api_hash, phone):
                       st.session_state.phone = phone
                       st.session_state.auth_step = 'code'
                       st.rerun()
           return

       elif st.session_state.auth_step == 'code':
           st.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {st.session_state.phone}")
           
           # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
           with st.form(key='code_form'):
               code = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram", key="code_input")
               submit_code = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")
               
               if submit_code:
                   try:
                       logger.info(f"[{datetime.now()}] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º")
                       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
                       if st.session_state.client and not st.session_state.client.is_connected():
                           await st.session_state.client.connect()
                           
                       await asyncio.wait_for(
                           st.session_state.client.sign_in(
                               phone=st.session_state.phone,
                               code=code,
                               phone_code_hash=st.session_state.phone_code_hash
                           ),
                           timeout=30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                       )
                       logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
                       st.session_state.auth_step = 'completed'
                       st.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                       st.rerun()
                   except asyncio.TimeoutError:
                       logger.error(f"[{datetime.now()}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞")
                       st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                   except Exception as e:
                       logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {str(e)}")
                       st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {str(e)}")
           
           # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–Ω–µ —Ñ–æ—Ä–º—ã
           if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ", key="resend_code_btn"):
               if await send_code(api_id, api_hash, st.session_state.phone):
                   st.success("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ")
           return

       # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
       try:
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –æ–Ω
           if not st.session_state.client or not st.session_state.client.is_connected():
               # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
               if st.session_state.client:
                   try:
                       await st.session_state.client.connect()
                       client = st.session_state.client
                   except Exception:
                       # –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                       client = TelegramClient(f'session_{st.session_state.session_id}', api_id, api_hash)
                       await client.connect()
               else:
                   # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                   client = TelegramClient(f'session_{st.session_state.session_id}', api_id, api_hash)
                   await client.connect()
           else:
               client = st.session_state.client

           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
           if not await client.is_user_authorized():
               st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
               st.session_state.auth_step = 'phone'
               st.rerun()
               return

           logger.info(f"[{datetime.now()}] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
           try:
               chat = await asyncio.wait_for(
                   client.get_entity(chat_username),
                   timeout=30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
               )
           except asyncio.TimeoutError:
               st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
               return
           except Exception as e:
               st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç: {str(e)}")
               return
           
           logger.info(f"[{datetime.now()}] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
           try:
               messages = await asyncio.wait_for(
                   client.get_messages(
                       chat,
                       filter=InputMessagesFilterPhotos,
                       limit=None
                   ),
                   timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∞—Ç–æ–≤
               )
           except asyncio.TimeoutError:
               st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —á–∞—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
               return
           except Exception as e:
               st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {str(e)}")
               return
           
           if not messages:
               st.warning("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
               return
           
           st.success(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(messages)}")
           
           # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
           if hasattr(chat, 'title') and chat.title:
               chat_name = chat.title
           elif hasattr(chat, 'username') and chat.username:
               chat_name = chat.username
           else:
               chat_name = "unknown_chat"
           
           # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —á–∞—Ç–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
           safe_chat_name = sanitize_filename(chat_name)
           download_dir = f'photos_from_{safe_chat_name}'
           os.makedirs(download_dir, exist_ok=True)
           
           progress_bar = st.progress(0)
           status_text = st.empty()
           failed_photos = []
           
           for i, message in enumerate(messages):
               progress = (i + 1) / len(messages)
               progress_bar.progress(progress)
               status_text.text(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {i+1} –∏–∑ {len(messages)}")
               
               try:
                   # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                   path = await asyncio.wait_for(
                       message.download_media(f'./{download_dir}/'),
                       timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                   )
                   if path:
                       logger.info(f"[{datetime.now()}] –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {path}")
               except asyncio.TimeoutError:
                   logger.error(f"[{datetime.now()}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
                   failed_photos.append(message.id)
               except Exception as e:
                   logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {str(e)}")
                   failed_photos.append(message.id)

           # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
           if failed_photos:
               st.warning(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {len(failed_photos)} –∏–∑ {len(messages)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
           else:
               st.success(f"–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –≤ –ø–∞–ø–∫—É {download_dir}!")
           
       except Exception as e:
           logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
           
   except Exception as e:
       logger.error(f"[{datetime.now()}] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
       st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
   
   finally:
       # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
       if client and client.is_connected():
           await client.disconnect()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üì∏ Telegram Photos Downloader")
st.write("–°–∫–∞—á–∏–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —á–∞—Ç–æ–≤ Telegram")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ (–±–µ–∑ —Ñ–æ—Ä–º—ã)
api_id = st.text_input(
    "API ID", 
    value=st.session_state.get('saved_api_id', ''),
    type="password",
    help="–¶–∏—Ñ—Ä–æ–≤–æ–π ID –∏–∑ my.telegram.org"
)
api_hash = st.text_input(
    "API Hash", 
    value=st.session_state.get('saved_api_hash', ''),
    type="password",
    help="–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ö–µ—à –∏–∑ my.telegram.org"
)
chat_username = st.text_input(
   "Username —á–∞—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
   value=st.session_state.get('saved_chat_username', "me" if st.session_state.auth_step == 'completed' else ""),
   help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'me' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
)

if st.button("–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", key="main_button"):
   # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session_state, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
   st.session_state.saved_api_id = api_id
   st.session_state.saved_api_hash = api_hash
   st.session_state.saved_chat_username = chat_username
   
   if not api_id or not api_hash or not chat_username:
       st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
   else:
       # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
       info_placeholder = st.empty()
       info_placeholder.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
       
       # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
       try:
           # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
           loop = asyncio.new_event_loop()
           asyncio.set_event_loop(loop)
           
           # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
           progress_placeholder = st.empty()
           with progress_placeholder.container():
               st.progress(0.25)
               st.caption("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
           
           # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
           loop.run_until_complete(download_photos(api_id, api_hash, chat_username))
           
           # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
           progress_placeholder.empty()
       except Exception as e:
           logger.error(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {str(e)}")
           st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
       finally:
           # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
           loop.close()
           # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
           info_placeholder.empty()

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
   st.write("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
   st.write(f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {st.session_state.auth_step}")
   st.write(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {st.session_state.phone}")
   st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: {st.session_state.session_id}")
   
   if st.button("–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"):
       # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ session_state
       keys_to_delete = list(st.session_state.keys())
       for key in keys_to_delete:
           del st.session_state[key]
       st.session_state.session_id = str(uuid.uuid4())  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
       st.session_state.auth_step = 'phone'
       st.rerun()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
   st.write("""
   1. –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ API Hash:
      - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org
      - –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å
      - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'
      - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      
   2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É:
      - –í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ API ID –∏ API Hash
      - –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ 'me'
      
   3. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:
      - –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤ Telegram
      
   4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
   """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
   "<div style='text-align: center'>–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ Telegram</div>",
   unsafe_allow_html=True
)
